module QrdaExecutionHelper
  NODE_TYPES ={1 => :element ,
  2 => :attribute ,
  3 => :text,
  4 => :cdata,
  5 => :ent_ref,
  6 => :entity,
  7 => :instruction,
  8 => :comment,
  9 => :document,
  10  => :doc_type,
  11  => :doc_frag,
  12  => :notaion}

def node_type(type)
  return NODE_TYPES[type]
end
   # method used to mark the elements in the document that have errors so they
  # can be linked to
  def match_errors(doc, errors)
    doc = Nokogiri::XML(doc) if doc.kind_of? String
    uuid = UUID.new
    error_map = {}
    error_id = 0
    error_attributes = []
    locs = errors.collect{|e| e.location}
    locs.compact!

    locs.each do |location|
      # Get rid of some funky stuff generated by schematron
      clean_location = location.gsub("[namespace-uri()='urn:hl7-org:v3']", '')
      node = doc.at_xpath(clean_location)
      if(node)
        elem = node
        if node.class == Nokogiri::XML::Attr
          error_attributes << node
          elem = node.element
        end
        elem = elem.root if node_type(elem.type) == :document
        if elem

          unless elem['error_id']

            elem['error_id']= uuid.generate.to_s
          end
          error_map[location] = elem['error_id']
        end
      end
    end

    return doc, error_map, error_attributes
  end

  # helper method used to generate cat 3 test results
  def aggregated_measure_results(pt)
    results = {}
    pt.expected_results.each_pair do |k,value|
      result = results[value["measure_id"]] ||= {"hqmf_id"=>value["measure_id"], "population_ids" => {}}
      population_ids = value["population_ids"]
      strat_id = population_ids["stratification"]
      population_ids.each_pair do |pop_key,pop_id|
        if pop_key != "stratification"
          pop_result  = result["population_ids"][pop_id] ||= {"type"=> pop_key}
          pop_val = value[pop_key]
          if strat_id
            pop_result["stratifications"] ||= {}
            pop_result["stratifications"][strat_id] = pop_val
          else
            pop_result["value"] = pop_val
          end
        end
      end
    end
    results
  end


end
