<%
#
# renders the errors for the most recent test execution for the given task.
#
# must specify local variable "execution"
#
%>
<% uploaded_patients = Patient.where(correlation_id: params['id']) %>
<% file_name_id_hash = {} %>
<% uploaded_patients.each { |uploaded_patient| file_name_id_hash[uploaded_patient['file_name']] = uploaded_patient if uploaded_patient['file_name'] } %>
<% if file_name_id_hash.size == 0
  @individual_results.each do |ir|
    next unless ir['file_name']
    next if file_name_id_hash[ir['file_name']]
    file_name_id_hash[ir['file_name']] = ir.patient
  end
end %>
<% files_with_errors = [] %>

<% if execution.status_with_sibling == 'incomplete' %>
  <% tracker = execution.tracker %>
  <% msg = tracker ? tracker.log_message.last : 'complete' %>
  <p class="lead row bg-info execution-status"><%= icon('fas fa-fw fa-spin text-info', 'sync-alt', :"aria-hidden" => true) %> In Progress (<%= msg %>)</p>
  <p>You do not need to reload your browser. Results will automatically display when the tests are done running.</p>
  <% # ajax contacts test_execution's show controller action with format: 'js'. controller then directs to show.js.erb which will wait, then re-render %>
  <script>
    $.ajax({url: "<%= request.env['PATH_INFO'] %>", type: "GET", dataType: 'script', data: { partial: 'execution_results' }});
  </script>

<% else %>
  <% if passing = execution.status_with_sibling == 'passing'%>
    <%= render partial: 'test_executions/results/passing_result', locals: { execution: execution, execution_type: nil } %>
  <% elsif execution.errored_or_sibling_errored? %>
    <% [execution, execution.sibling_execution].compact.each do |ex| %>
      <% ex_type = ex.task._type[0, 2] # get first two letters e.g. C1 or C3 %>
      <% if ex.errored? %>
        <p class="lead row bg-warning execution-status"><%= icon('fas fa-fw text-warning', 'exclamation-circle', :"aria-hidden" => true) %> <%= ex_type %> Execution: An internal error occurred (<code><%= ex.error_summary %></code>)</p>
      <% elsif ex.passing? %>
        <%= render partial: 'test_executions/results/passing_result', locals: { execution: ex, execution_type: ex_type } %>
      <% elsif ex.failing? %>
        <p class="lead row bg-danger execution-status">
          <%= icon('fas fa-fw text-danger', 'times-circle', :"aria-hidden" => true) %> <%= ex_type %> Execution:
          <%= execution_failure_message(ex) %>
        </p>
      <% end %>
    <% end %>
  <% else %>
    <div class="row">
      <div class="col-sm-7">
        <p class="lead row bg-danger execution-status">
          <%= icon('fas fa-fw text-danger', 'times-circle', :"aria-hidden" => true) %>
          <%= execution_failure_message(execution) %>
        </p>
      </div>
      <div class="col-sm-5">
        <div class="execution-information bg-info">
          <ul class="list-unstyled">
            <li><strong>Test Date:</strong> <%= local_time(execution.updated_at) %></li>
            <li><strong>Files Uploaded:</strong> <%= execution.artifact['file'] %></li>
          </ul>
        </div>
      </div>
    </div>
  <% end %>

  <% collected_errors = Cypress::ErrorCollector.collected_errors(execution) %>

  <% if collected_errors[:exception] %>
    <h2>An internal error occurred when loading this page</h2>
    <p><%= collected_errors[:exception] %></p>
    <span class="help-block">Please report this issue to the Cypress team at <a href="https://github.com/projectcypress/cypress/issues" target="_blank">https://github.com/projectcypress/cypress/issues</a> and include: the uploaded file, the measure being tested, and the error message received.</span>
  <% end %>
  <% if collected_errors.nonfile.count.positive? %>
    <h2>Missing or Duplicate Files</h2>
    <ul class="fa-ul">
      <% collected_errors.nonfile.each do |error_message| %>
        <li><%= icon('fas fa-li', 'times', :"aria-hidden" => true) %> <%= error_message %></li>
      <% end %>
    </ul>
  <% end %>

  <% if collected_errors.files.values.any? { |err| err.count.positive? } || (@task.is_a? CMSProgramTask) %>
    <h2><%= "Errors and " unless passing %>Warnings</h2>
    <div id="xml-tabs" class="hidden file-error-tabs short-tabs">
      <ul>
        <% collected_errors.files.each do |file_name, error_result| %>
          <li>
            <a href=<%= "##{execution.id}_#{file_name.gsub(/[\W]/,'_')}" %>>
              <% total_errors = error_result.keys.map{ |s| error_result[s].execution_errors.count }.reduce(&:+) %>
              <% if total_errors.positive? %>
                <div class="file-name">
                  <% if error_result.keys.any? { |s| s != 'Warnings' && error_result[s].execution_errors.count.positive?} %>
                    <%= icon('fas fa-fw text-danger', 'times', :"aria-hidden" => true) %>
                  <% else %>
                    <%= icon('fas fa-fw text-warning', 'exclamation-triangle', :"aria-hidden" => true) %>
                  <% end %>
                  <%= file_name %>
                </div>
                <div class="file-badge">
                  <span class="badge pull-right">
                    <%= total_errors %>
                    <span class="sr-only">errors</span>
                  </span>
                </div>
              <% else %>
                <div class="file-name">
                  <%= icon('fas fa-fw text-success', 'check', :"aria-hidden" => true) %>
                  <%= file_name %>
                  <span class="sr-only">no errors</span>
                </div>
              <% end %>
            </a>
          </li>
          <% files_with_errors << file_name %>
        <% end %>
        <% if @task.is_a? CMSProgramTask
          non_errored_files = file_name_id_hash.keys - files_with_errors
          non_errored_files.each do |file_name| %>
          <li>
            <a href=<%= "##{execution.id}_#{file_name.gsub(/[\W]/,'_')}" %>>
              <%= file_name %>
            </a>
          </li>
          <% end %>
        <% end %>
        
      </ul>

      <% if (@task.is_a? CMSProgramTask) && @task.product_test.reporting_program_type == 'eh'
        continuous_measures = @task.measures.where(measure_scoring: 'CONTINUOUS_VARIABLE').only(:id, :population_sets, :cms_id, :description, :calculation_method).sort_by { |m| [m.cms_int] }
        proportion_measures = @task.measures.where(measure_scoring: 'PROPORTION').only(:id, :population_sets, :cms_id, :description, :calculation_method).sort_by { |m| [m.cms_int] }
        ratio_measures = @task.measures.where(measure_scoring: 'RATIO').only(:id, :population_sets, :cms_id, :description, :calculation_method).sort_by { |m| [m.cms_int] }
        display_calculations = file_name_id_hash.size < APP_CONSTANTS['max_cvu_calculations_displayed'] ? true : false
        file_name_id_hash.each do |file_name, patient|
          if files_with_errors.include?(file_name) %>
            <div id=<%= "#{execution.id}_#{file_name.gsub(/[\W]/,'_')}" %>>
              <% unless display_calculations %>
                <p><strong>Please use Product Report to view eCQM calculations for uploads with greater than <%= APP_CONSTANTS['max_cvu_calculations_displayed'] %> files.</strong></p>
              <% end %> 
              <%= render partial: 'test_executions/results/execution_results_for_file', locals: { execution: execution, file_name: file_name, error_result: collected_errors.files[file_name], is_passing: passing, on_execution_show_page: true, continuous_measures: continuous_measures, proportion_measures: proportion_measures, ratio_measures: ratio_measures, patient: patient, export: false, display_calculations: display_calculations } %>
            </div>
          <% else %>
            <div id=<%= "#{execution.id}_#{file_name.gsub(/[\W]/,'_')}" %>>
              <p class="lead">
                <%= "#{file_name}" %>
              </p>
              <% if display_calculations %>
                <%= render partial: 'test_executions/results/calculation_results_for_file', locals: { execution: execution, file_name: file_name, continuous_measures: continuous_measures, proportion_measures: proportion_measures, ratio_measures: ratio_measures, patient: patient, export: false } %>
              <% else %>
                <p><strong>Please use Product Report to view eCQM calculations for uploads with greater than <%= APP_CONSTANTS['max_cvu_calculations_displayed'] %> files.</strong></p>
              <% end %>
            </div>
          <% end %>
        <% end %>
      <% else %>
        <% collected_errors.files.each do |file_name, error_result| %>
          <div id=<%= "#{execution.id}_#{file_name.gsub(/[\W]/,'_')}" %>>
            <%= render partial: 'test_executions/results/execution_results_for_file', locals: { execution: execution, file_name: file_name, error_result: error_result, is_passing: passing, on_execution_show_page: true, continuous_measures: continuous_measures, proportion_measures: proportion_measures, ratio_measures: ratio_measures, patient: nil, export: false, display_calculations: false } %>
          </div>
        <% end %>
      <% end %>
    </div>
  <% end %>
<% end %>
