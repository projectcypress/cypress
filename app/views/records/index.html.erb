<%# add patients option #%>
<% if @vendor %>
  <%= button_to "+ Import Patients", new_vendor_record_path(@vendor.id), :method => :get, :params => {default: @bundle}, :class => "btn btn-primary pull-right", :disabled => @bundle.nil? %>
  <h1><%= @vendor.name %> Patient List</h1>
  <div class="vendor-upload-jobs">
    <%= render 'vendor_upload_jobs', :vendor => @vendor %>
  </div>
<% else %>
  <h1>Master Patient List</h1>
<% end %>
<div class="row">
  <div class="col-md-5 col-sm-6">
    <h1>Filter Patients</h1>
    <div class="form-group">
      <label for="search_measures">Type to search by measure</label>
      <input id="search_measures" type="search" class="form-control" placeholder="Type the name or CMS ID of a measure"/>
    </div>
  </div>
  <div class="col-md-7 col-sm-6">
    <h1>Annual Update Bundle</h1>
    <div>
        <%# loop through bundles & use radio buttons #%>
        <%= bootstrap_form_tag do |f| %>
          <%= f.form_group :bundle_id do %>
            <% Bundle.available.all.each do |bundle| %>

              <% if @vendor %>
                <div style="display: inline-block">
                  <%= f.radio_button :bundle_id, bundle.id, label: bundle.title, label_class: "btn btn-checkbox vendor-checkbox",
                                     checked: bundle == @bundle %>
                </div>
                <%# create qrda download package of vendor patients #%>
              <% else %>
                <div style="display: inline-block">
                  <%= f.radio_button :bundle_id, bundle.id, label: bundle.title, label_class: "btn btn-checkbox bundle-checkbox",
                                     checked: bundle == @bundle %>
                </div>
                <div class="radio download-btn" id='<%= bundle.id %>'>
                  <%= render "mpl_download", :bundle => bundle %>
                </div>
              <% end  %>
            <% end %><%# bundle loop #%>
          <% end %><%# form_group #%>
        <% end %><%# form tag #%>
    </div>
  </div>
</div>

<% measure_cache_key = @measure.nil? ? 'none' : @measure.id %>
<% measure_population_cache_key = @measure.nil? ? 'none' : @measure.key_for_population_set(@population_set_hash) %>
<% cache [@patients.map(&:id), measure_cache_key, measure_population_cache_key, hide_patient_calculation?] do %>
  <div class="row">
    <div id="records_list" class="col-sm-12">
      <%= render 'records_list', :patients => @patients, :measure => @measure, :population_set_hash => @population_set_hash, :bundle => @bundle, :vendor => @vendor %>
    </div>
  </div>
<% end %><%# cache records #%>

<script type="text/javascript">
  // initialize jQueryUI Autocomplete for searching measures
  $('#search_measures').autocomplete({
    delay: 500,
    source: <%= @measure_dropdown %>, // autocomplete suggestions
    select: function(event, data) {  // fired on item select
      // gets records by measure via AJAX and rerender the records list.
      // data.item.value provides the URL for the selected measure
      $.get(data.item.value);
      // autocomplete's default action is to populate the input with the selected value
      // prevent the user from seeing an ugly URL in their search box here
      event.preventDefault();
    },
    focus: function(event, data) { event.preventDefault(); } // fired on item focus
  });

  // add and remove some classes from the generated autocomplete widget
  $('#search_measures').data('ui-autocomplete')._renderItem = function(ul, item) {
    return $('<li class="list-group-item">').append(item.label).appendTo(ul);
  }
  $('#search_measures').data('ui-autocomplete')._renderMenu = function(ul, items) {
    var that = this;
    $.each(items, function(index, item) {
      that._renderItemData(ul, item);
    });
    $(ul).removeClass('ui-widget ui-widget-content').addClass('list-group');
  }

  // rerender the records list to show records from all measures if no value searched
  $('#search_measures').on('keyup', function() {
    if (!$(this).val()) {
      $("#records_list").html("<%= escape_javascript(render 'records_list', :patients => @patients, :measure => @measure, :population_set_hash => @population_set_hash, :bundle => @bundle, :vendor => @vendor ) %>");
      // any statically changed form elements require a separate token refresh call
      $.rails.refreshCSRFTokens();
    }
  })
</script>
